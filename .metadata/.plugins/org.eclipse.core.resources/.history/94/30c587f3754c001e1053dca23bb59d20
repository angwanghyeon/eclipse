package com.keduit.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.keduit.dto.BoardVo;

import util.DBManager;

public class BoardDAO {
	
	//싱글톤으로 구현
	private BoardDAO() {
		
	}
	private static BoardDAO instance = new BoardDAO();
	
	public static BoardDAO getInstance() {
		
		return instance;
	}
	//여기까지가 싱글톤으로 구현
	
	//전체 불러오는 메소드
	public List<BoardVo> selectAllBoards() {
		
		List<BoardVo> list = new ArrayList<>();
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		String sql = "select * from board order by num asc";
		try {
			conn = DBManager.getConnection();
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);
			
			while(rs.next()){
				BoardVo bv = new BoardVo();
				//rs에서 가져온 값을 하나하나 vo 객체에 할당
				bv.setNum(rs.getInt("num"));
				bv.setPass(rs.getString("pass"));
				bv.setName(rs.getString("name"));
				bv.setEmail(rs.getString("email"));
				bv.setTitle(rs.getString("title"));
				bv.setContent(rs.getString("content"));
				bv.setReadcount(rs.getInt("readcount"));
				bv.setWritedate(rs.getTimestamp("writedate"));
				
				list.add(bv);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBManager.close(conn, stmt, rs);
		}
		
		return list;
	}
	
	//값 추가하기
	public void insertBoard(BoardVo bv) {
		String sql = "insert into board("
				+ "num, name, email, pass, title, content, readcount, writedate) "
				+"values(board_seq.nextval, ?, ?, ?, ?, ?, default, default)";
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, bv.getName());
			pstmt.setString(2, bv.getEmail());
			pstmt.setString(3, bv.getPass());
			pstmt.setString(4, bv.getTitle());
			pstmt.setString(5, bv.getContent());
			pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBManager.close(conn, pstmt);
		}
	}
	
	//하나만 골라오기
	public BoardVo selectOne(String num) {
		
		String sql = "select * from board where num=?";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		BoardVo bv = null;
		try {
			bv = new BoardVo();
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, Integer.parseInt(num));
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
			bv.setNum(rs.getInt("num"));
			bv.setPass(rs.getString("pass"));
			bv.setName(rs.getString("name"));
			bv.setEmail(rs.getString("email"));
			bv.setTitle(rs.getString("title"));
			bv.setContent(rs.getString("content"));
			bv.setReadcount(rs.getInt("readcount"));
			bv.setWritedate(rs.getTimestamp("writedate"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBManager.close(conn, pstmt, rs);
		}
		System.out.println("아아 한놈 불러오기 성공함 : "+bv.getTitle());
		return bv;
	}
	
	//업데이트 보드
	public void updateBoard(BoardVo bv) {
		String sql = "UPDATE board SET "
				+ "pass=?, name=?, email=?, title=?, content=? WHERE num=?";
		
	}
	
	public void deleteBoard(String num) {
		String sql = "delete from board where num = ?";
		Connection conn = null;
		Statement stmt = null;
		
		try {
			conn = DBManager.getConnection();
			stmt = conn.createStatement();
			stmt.executeQuery(sql);
			System.out.println("삭제 완료");
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBManager.close(conn, stmt);
		}
	}
	
	public void updateReadcount(String num) {
		String sql = "update board set readcount = readcount+1 where num = ?";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		conn = DBManager.getConnection();
	}
}
